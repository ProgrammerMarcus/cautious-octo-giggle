import pricespy
import pricerunner
import rtings
from difflib import SequenceMatcher
from itertools import chain


def search(product: str):
    """
    Collects search results from scrapers into one.
    @param product: The product to search for.
    @return: A dictionary of the results.
    """
    ps = pricespy.get_search(product)
    pr = pricerunner.get_search(product)
    rt = rtings.get_search(product)

    combined = list(chain(ps, pr, rt))
    merged = dict()

    for d in combined:
        filtered = list(filter(lambda v: SequenceMatcher(None, v["name"], d["name"]).ratio() > 0.7, combined))
        merged.update({d["name"]: filtered})
        for r in filtered:
            combined.remove(r)
    return merged


def gather(limited: dict):
    """
    Gathers the reviews about the product in the dictionary.
    @param limited: A product from the dictionary generated by search.
    @return: The reviews in a dictionary with reviews, score, sources.
    """
    final = {"ratings": list(), "score": list(), "sources": list()}
    for u in limited:
        url = u["url"]
        if "pricespy.co.uk" in url:
            try:
                ratings = pricespy.get_list(url, 20)
                score = pricespy.get_score(url)
            except Exception:
                print("Error in PriceSpy scraper")
            else:
                final.update({"ratings": final["ratings"] + ratings})
                final.update({"score": final["score"] + list({score})})
                final.update({"sources": final["sources"] + list({"PriceSpy.co.uk"})})
        elif "pricerunner.com" in url:
            try:
                ratings = pricerunner.get_reviews(url)
                score = pricerunner.get_score(url)
            except Exception:
                print("Error in Pricerunner scraper")
            else:
                final.update({"ratings": final["ratings"] + ratings})
                final.update({"score": final["score"] + list({score})})
                final.update({"sources": final["sources"] + list({"Pricerunner.com"})})
        elif "rtings.com" in url:
            try:
                ratings = rtings.get_reviews(url)
                score = rtings.get_score(url)
            except Exception:
                print("Error in Rtings scraper")
            else:
                final.update({"ratings": final["ratings"] + ratings})
                final.update({"score": final["score"] + list({score})})
                final.update({"sources": final["sources"] + list({"Rtings.com"})})
    return final
